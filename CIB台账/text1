   git filter-branch --env-filter '
   OLD_EMAIL="sun_zengchang@163.com"
   CORRECT_NAME="Ivan-Sun"
   CORRECT_EMAIL="19359022+Ivan-sun@users.noreply.github.com"
   
   if [ "$GIT_COMMITTER_EMAIL" = "$OLD_EMAIL" ]
   then
       export GIT_COMMITTER_NAME="$CORRECT_NAME"
       export GIT_COMMITTER_EMAIL="$CORRECT_EMAIL"
   fi
   if [ "$GIT_AUTHOR_EMAIL" = "$OLD_EMAIL" ]
   then
       export GIT_AUTHOR_NAME="$CORRECT_NAME"
       export GIT_AUTHOR_EMAIL="$CORRECT_EMAIL"
   fi
   ' --tag-name-filter cat -- --all


使用 git filter-repo
安装 git-filter-repo：首先，确保安装git-filter-repo。可以通过以下命令安装（假设你已经有了Python环境）：
bash
   pip install git-filter-repo
备份仓库：在开始之前，再次强调备份你的仓库数据，以防止意外的数据丢失。

使用 git filter-repo 替换邮箱：编辑一个配置文件，比如email_replace.txt，内容如下：

   [email "sun_zengchang@163.com"]
       new = 815097558@qq.com
然后运行以下命令来应用更改：

bash
   git filter-repo --email-callback=email_replace.txt
请确保将your-public-email@example.com替换为你想要公开的邮箱地址。

清理并优化：git filter-repo在执行完毕后会自动进行一些清理操作，但你仍可能需要手动删除.git/refs/original/目录和执行git gc来进一步优化存储空间。

强制推送：完成上述步骤后，使用以下命令强制推送你的更改：

bash
   git push --force --tags origin 'refs/heads/*'
注意事项
确保所有协作者都知晓你即将进行的历史重写操作，以免引起工作冲突。
git filter-repo会创建一个新的仓库目录，原有目录会被保留为一个后缀为_original的备份目录。
如果问题仍然存在，再次检查GitHub的邮箱设置，确保你已经正确地公开了用于提交的邮箱地址，或者该邮箱地址已经被添加到了GitHub账户并且设置为公开。